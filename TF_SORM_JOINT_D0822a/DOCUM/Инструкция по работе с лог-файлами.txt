   Для работы с лог-файла реализованы процедуры, расположенные в TF_SORM.ASM и макросы, 
расположенные в MACR_SOR.INC. Они используют процедуры библиотеки hdd.asm. Они также 
используют переменные и буфера из файла TF_TDAT.INC.
   Для включения логгирования необходимо константу _debugFile в начале файла _DEFS.ASM  
установить в true. В этом случае перед началом главного цикла выполнится процедура
open_debug_file - открытие лог-файла, а при перезагрузке по Alt-S выполнится процедура
close_debug_file - закрытие лог-файла. 
   Тогда во время работы можно использовать макросы для записи в файл: 
@String_to_file - запись в файл последовательности байтов "как есть"
@ici_to_file - запись в файл точки трассировки
@dword_to_file - запись в файл 16-ричного значения
@Array_to_file - запись в файл массива байтов в виде отображения 16-ричных кодов
   Можно также использовать процедуры write_cr_lf_to_debug_file - запись в файл перевода
каретки и write_space_to_debug_file - запись в файл пробела. Поскольку они без параметров, 
они не оформлены в макросы.
   Имя лог-файла устанавливается в строке DebugFile из файла TF_TDAT.dat и должно заканчиваться
нулём.
   Кроме того, установка константы _isDebugBuffered в true в начале файла _DEFS.ASM
позволяет включить буферизацию вывода. Если в работе происходит много вывода в лог-файл,
то программа может перестать реагировать на управление. Поэтому, лучше буферизацию 
стараться включать. Однако, если программа зависает в процессе работы, то буфер может оказаться
несброшенным на устройство. В этом случае можно попробовать отключить буферизацию и получить,
таким образом, данные о её работе. Константа _DebugBufferSize позволяет установить
размер буфера.
   Библиотека HDD позволяет создавать файлы только во внутренней флеш-памяти блока, на 
диске c:. Можно забирать их оттуда, нажав клавишу F8 при загрузке и выйдя в режим командной 
строки (заметим, что система наименования файлов нестандартна, в частности, файлы debug.txt и
DEBUG.TXT - это разные файлы и могут присутствовать в одной папке одновременно, и допустимы 
имена файлов типа D:DEBUG.TXT (это имя файла на диске c:)). Можно поступить по другому: 
записывать отладочную информацию в файл со стандартным именем, например, DEBUG.TXT, и
вписать команду 
copy DEBUG.TXT D:\
ПЕРЕД запуска prog.exe (не после, потому что команды после него при Alt-S не достигаются)
в файле autoexec.bat. Тогда можно будет запустить блок ДВАЖДЫ и после второго запуска выключить. 
Отладочный файл первого запуска будет скопирован на диск d:.
   Раз в определённое число прохождений главного цикла вызывается процедура
display_debug_file_size, отображающая текущий размер лог-файла.
   Внимание! В библиотеке hdd.asm нет процедур, дающих возможность узнать свободное пространство
на устройстве, и поэтому необходимо следить за ним самостоятельно. Для помощи в этом
процедура display_debug_file_size отображает текущий размер лог-файла на экране в
строке DebugFileSizeInfoRow и колонке DebugFileSizeInfoCol. Кроме того, в константе
_DebugFileMaxSize можно указать максимальный размер файла, по достижении которого в файл
выводится строка байт BreakDebugFile и файл закрывается, а display_debug_file_size начинает
выводить на экран строку байт NoDebugFileSize. При оценке достижения максимального размера
программа учитывает возможность записи _DebugBufferSize байт для буферизованной записи и
_DebugWriteSize для небуферизованной.  Заметьте, что, теоретически, размер файла
может превзойти _DebugFileMaxSize на несколько байт - туда обязательно записывается информация
о переполнении и закрытии файла. Кроме того, если файл оказывается слишком велик в момент
открытия и запись в него невозможна, туда всё-таки дописывается несколько строк - информация 
об открытии, строка из BreakDebugFile и информация о закрытии, и так при каждой загрузке программы.
Поэтому, нельзя допускать бесконечные перезагрузки при переполненном лог файле и включённой
буферизации. Перед началом работы надо выяснить размер свободного пространства на устройстве, 
установить _DebugFileMaxSize, а потом следить, не произошло ли переполнения.
Обратите внимание, что при буферизованном выводе в лог размер файла нарастает порциями, равными
по размеру буферу.
   По нажатию клавиш Alt-D лог без лишних вопросов очищается и дальнейший вывод идёт в этот
опустошённый файл (происходит закрытие файла, удаление его и создание и открытие пустого файла).