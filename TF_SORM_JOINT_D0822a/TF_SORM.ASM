INCLUDE _DEFS.ASM
TITLE   SORM
;.386P
PAGE	60,130
;
;…ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
;∫     ==            è‡Æ£‡†¨¨† „Ø‡†¢´•≠®Ô °´Æ™Æ¨ ëéêå             ==    ∫ €
;»ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº €
;  ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
; - - - - - - - - - - - - - S T A R T - P T R - - - - - - - - - - - - - - - - -

CODE_AXS        SEGMENT PARA USE16 PUBLIC "CODE"
ASSUME  DS:DATA_AXS,CS:CODE_AXS
START:
                jmp     StartNew
CODE_AXS        ends
IF _MSP NE TRUE
; - - - - - - - - - - - - - - -  H D D - - - - - - - - - - - - - - - - - - - -
;
HDD_CODE	SEGMENT PARA PUBLIC USE16 'CODE'
                extrn   HDD_SIZE:ABS
                extrn   InitHDD
                extrn   FileOpen
                extrn   FileErase
                extrn   FileEraseName
                extrn   FileRename
                extrn   FileCreate
                extrn   FileCreateSize
                extrn   FileCreateEmpty
                extrn   FileClose
                extrn   FileSize
                extrn   FileSeek
                extrn   FilePos
                extrn   FileRead
                extrn   FileWrite
HDD_CODE	ENDS

; - - - - - - - - - - - - - - -  î Ä è ó - - - - - - - - - - - - - - - - - - -
;
                INCLUDE pllext.asm
                PUBLIC  SEG_PLL_DATA
                PUBLIC  BASIC0
ENDIF

; - - - - - - - - - - - - - - - S T A C K - - - - - - - - - - - - - - - - - - -
STACK_AXS       SEGMENT PARA USE16 STACK "STACK"
STACK_GO        label   word

Curr_T          DD      0

include lib\exc.dat
IF _MSP EQ TRUE
SEG_DOP         DW      0
SEG_C111        DW      294     DUP(0)          ;çÄóÄãé ëÖÉåÖçíÄ äéååìíÄíéêÄ
SEG_FLASH_OLD   DW      0
SEG_SYS         DW      0
SEG_SORM        DW      328     ;
SEG_BUNCH       DW      336     ;
                ; ⁄ƒƒ PUMA ƒƒƒƒƒƒƒƒƒƒƒø
                ; ≥                   ≥
SEG_PUMA_DRV    DW      344     ;     ≥
SEG_PUMA_SCR    DW      352     ;     ≥
SEG_PUMA        DW      360     ;     ≥
                ; ≥                   ≥
                ; ¿ƒƒ PUMA ƒƒƒƒƒƒƒƒƒƒƒŸ

ELSE
SEG_FL          DW      280     ; HDLC ≠† åëè-å !!!
SEG_SORM        DW      368     ;
SEG_MAX_II      DW      376     ;
                ; ⁄ƒƒ PUMA ƒƒƒƒƒƒƒƒƒƒƒø
                ; ≥                   ≥
SEG_PUMA_DRV    DW      384     ;     ≥
SEG_PUMA_SCR    DW      392     ;     ≥
SEG_PUMA        DW      400     ;     ≥
                ; ≥                   ≥
                ; ¿ƒƒ PUMA ƒƒƒƒƒƒƒƒƒƒƒŸ
SEG_BUNCH       DW      408     ;
ENDIF
SEG_ULOG        DW      0
SEG_COM         DW      0
SEG_AXD         DW      0



SEG_NLOG        DW      0
IF _MSP EQ TRUE
SEG_VIZ         DW      0
SEG_FLASH       DW      280;;;0D000h  ;ë•£¨•≠‚ FLASH
SEG_MARSH_S     DW      0
SEG_C000        DW      0                       ;çÄóÄãé ëÖÉåÖçíÄ äéååìíÄíéêÄ
SEG_TER         DW      0
ELSE
SEG_FLASH       DW      0D000h  ;ë•£¨•≠‚ FLASH
ENDIF
SEG_BABA        DW      0D800h  ;ë•£¨•≠‚ BABA
SEG_ADR_SOED    DW      0
SEG_ZAG         DW      0                       ;çÄóÄãé ëÖÉåÖçíÄ äéååìíÄíéêÄ
SEG_PCM         DW      0
SEG_NULL        DW      0
SEG_BUS         DW      0
SEG_SOED        DW      0
SEG_KONF        DW      0
SEG_TF          DW      0
SEG_OBJ         DW      0
SEG_GS8         DW      0
SEG_GS          DW      0D000H
SEG_ST          DW      0C800H          ;çÄóÄãé ëÖÉåÖçíÄ äéååìíÄíéêÄ
SEG_FS          DW      0B800H
SEG_AX          DW      0               ;ëÖÉåÖçí ÑÄççõï
SEG_BLK_LST     DW      _BLCK_LST1_SEG   ;í•™„È®© ·•£¨•≠‚ Á•‡≠Æ£Æ ·Ø®·™†
IF _MSP EQ TRUE
SEG_ST2         LABEL   WORD
        public  SEG_ST2
SEG_ST_1        DW      32;0D000H          ;çÄóÄãé ëÖÉåÖçíÄ äéååìíÄíéêÄ
SEG_VIDEO       LABEL WORD
        PUBLIC  SEG_VIDEO
SEG_SCR                 DW      0;168;0B800H    ;\ \
        public  SEG_SCR                         ;/ /
SEG_PROC                DW      0;120           ;\ \
        public  SEG_PROC                        ;/ /
SEG_DC                  DW      0:WORD;128;SEG_AX /  |-\ | | |\/| /-\
        public  SEG_DC                          ;/ / | | | | |\/| | |
SEG_FL                  DW      0:WORD;280      ;\ \ |-/ | | |  | |-|
SEG_BUF                 DW      0:WORD;192      ; \  |   \-/ |  | | |
        public  SEG_BUF                         ;\ \

NEW_ADR=1                                       ;\ \
ELAN=NEW_ADR                                    ; \
UNI_BL=1                                        ;\ \
ELSE
SEG_ANI_LST     DW      _ANI_LST_SEG    ;í•™„È®© ·•£¨•≠‚ Á•‡≠Æ£Æ ·Ø®·™†
;;;SEG_BUNCH       DW      _ANI_LST_SEG    ;·•£¨•≠‚ · ÆØ®·†≠®•¨ Ø„Á™Æ¢ èéäÄ àëèéãúáìû ëÖÉåÖçí Äéç !!!!

; - - - - - - - - - - - - - - -  H D D - - - - - - - - - - - - - - - - - - - -
;
                PUBLIC  SEG_HDD_HEAP
SEG_HDD_HEAP    DW      328

; - - - - - - - - - - - - - - -  î Ä è ó - - - - - - - - - - - - - - - - - - -
;
SEG_PLL_CS      DW      352     ;
SEG_PLL_DATA    DW      360     ;
LABEL	BASIC0


SEG_ALL         DW      _SEG_ALL;
ENDIF
_BLOCK_TF_SORM  = 4                             ;/ /
_TYPE_BLOCK     = _BLOCK_TF_SORM                ; /
        public _TYPE_BLOCK                      ;/ /
        public EXC_1

_SS_DOP_SIZE = 10h - ($-STACK_GO AND 0Fh)       ; ‡†·Á®‚†•¨ ¢Î‡†¢≠®¢†≠®• §Æ FFFFF0h
        db      _SS_DOP_SIZE    DUP('S')        ; ¢·‚†¢®¨ ≠•§Æ·‚†ÓÈ••
        DB      1000h           DUP('S')        ; ß§•·Ï ëíÖä
Stack_start     label   byte

SS_SIZE = $-STACK_GO
STACK_AXS       ENDS


;   ----------=========******** DATA ********==========---------

DATA_AXS  SEGMENT PARA USE16 PUBLIC 'DATA';ë•£¨•≠‚ ™Æ‰®£„‡†Ê®® 100-™†
NACH_AXS        LABEL   WORD
                ; --- ‡†°Æ‚† · Ø„Á™†¨®
                INCLUDE Bunch.DAT                      ; ß§•·Ï ‚Æ´Ï™Æ ÆØ‡•§•´•≠®Ô
;;;LEN_FILE        DW      8000H                       ; ≠• ®·ØÆ´Ïß„•‚·Ô
                ; ØÆ§™´ÓÁ†•¨ §†≠≠Î•
                INCLUDE TF_TDAT.INC

                ; --- ¢®ß„†´®ß†Ê®Ô Ø‡®≠Ô‚ÎÂ ™Æ¨†≠§ åé ---------------------------------
__mo_in_str     DB      '>', 0
__mo_out_str    DB      '<', 0
IF _MSP EQ TRUE
__sorm_2_str    DB      's', 0
__INF_STR_LEN   EQU     40      ; ®ß ™†¶§Æ© Ø‡®≠Ô‚Æ© ™Æ¨†≠§Î åé ¢Î¢•§•¨ ·‚Æ´Ï™Æ Ø•‡¢ÎÂ °†©‚
__INF_STR_COUNT EQU     34      ; ≠Æ¨•‡ ØÆ·´•§≠•© ·‚‡Æ™® ™„§† •ÈÒ ¨Æ¶≠Æ ¢Î¢Æ§®‚Ï ÆÁ•‡•§≠„Ó ™Æ¨†≠§„
ELSE
__sorm_2_str    DB      'm', 0
__INF_STR_LEN   EQU     39      ; ®ß ™†¶§Æ© Ø‡®≠Ô‚Æ© ™Æ¨†≠§Î åé ¢Î¢•§•¨ ·‚Æ´Ï™Æ Ø•‡¢ÎÂ °†©‚
__INF_STR_COUNT EQU     34;;; + 15     ; ≠Æ¨•‡ ØÆ·´•§≠•© ·‚‡Æ™® ™„§† •ÈÒ ¨Æ¶≠Æ ¢Î¢Æ§®‚Ï ÆÁ•‡•§≠„Ó ™Æ¨†≠§„
ENDIF
__sorm_1_in_str  DB     '·', 0
__sorm_1_out_str DB     'a', 0
__sorm_empty_str DB     ' ', 0
; --- debug MO ---
_ss_code        DD      0ABCD0000h       ;
_ss_1           DD      0
_ss_2           DD      0
_ss_3           DD      0
_ss_4           DD      0
; ------  ------

__inf_clear     DB      __INF_STR_LEN DUP('  '), 0 ; ·‚‡Æ™† ß†Á®È†ÓÈ†Ô ¨•·‚Æ ØÆ§ ≠Æ¢Î© ¢Î¢Æ§
__inf_y         DW      0       ; ¸ ·‚‡Æ™® §´Ô ¢Î¢Æ§† ÆÁ•‡•§≠Æ© ™Æ¨†≠§Î åé
__mo_in_lens    DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 0
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 10
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 20
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 30
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 40
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 50
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 60
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 70
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 80
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 90
                DB      6,  5,  12, 5,  4,  4,  4,  4,  8,  4   ; 100
                DB      6,  4,  9,  5,  5,  4,  4,  4,  16, 4   ; 110
IF _MSP EQ TRUE
                DB      6,  6,  5,  5,  2,  1,  1,  1,  1,  7   ; 120
                DB      1,  1, 22,  2,  2,  2,  1,  1,  1,  1   ; 130
                DB      1, 25,  2,  1,  1,  1,  1,  1,  1,  1   ; 140
                DB      1,  3,  1,  1,  1,  7,  6,  1,  1,  1   ; 150
ELSE
                DB      6,  6,  5,  5,  2,  2,  4,  4,  2,  7   ; 120
                DB      1,  1, 22,  2,  1,  8,  1,  1,  1,  1   ; 130
                DB      1, 25,  1,  1,  1,  1,  1,  1,  1,  1   ; 140
                DB      1,  3,  1,  1,  1,  7,  6,  1,  1,  1   ; 150
ENDIF
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 160
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 170
                DB      1,  1,  5,  1,  1,  1,  1,  1,  1,  1   ; 180
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 190
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 200
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 210
                DB      1,  1,  1,  1,  52, 1,  1,  1,  1,  1   ; 220
IF _MSP EQ TRUE
                DB      1,  1,  1,  1,  1, 27,  1,  1,  1,  1   ; 230
ELSE
                DB      1,  1,  1,  1,  1, 27,  1,  1,  1,  1   ; 230
ENDIF
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 240
                DB      1,  1,  1,  1,  1,  1,  1,  1,  1,  1   ; 250

                ;;;<Yu>
IF _MSP EQ TRUE
PEREM_MO156     DW      0
PEREM_          DW      0
PEREM_1         DW      0
PEREM_2         DW      0
ENDIF
PEREM_AL        DB      0    ;  \
PEREM_AH        DB      0    ;  |
PEREM_AX        DW      0    ;  |
PEREM_EAX       DD      0    ;  |
PEREM_DL        DB      0    ;  |
IF _MSP NE TRUE
PEREM_DH        DB      0    ;  |
ENDIF
PEREM_DX        DW      0    ;  |
PEREM_BX        DW      0    ;  |
PEREM_EBX       DD      0    ;  |
PEREM_BP        DW      0    ;  |
PEREM_EBP       DD      0    ;  |
PEREM_CL        DB      0    ;  |
PEREM_CX        DW      0    ;  |    Ø•‡•¨•≠≠Î• ‡•£®·‚‡Æ¢
PEREM_DI        DW      0    ;  |    §´Ô ¢‡•¨¨•≠Æ£Æ Â‡†≠•≠®Ô ¢≠„‚‡® Ø‡ÆÊ•§„‡
PEREM_EDI       DD      0    ;  |
PEREM_SI        DW      0    ;  |
PEREM_ESI       DD      0    ;  |
PEREM_SOED_PTR  DD      0    ;  |  Â‡†≠•≠®• „™-´Ô ≠† ·•··®Ó ¢ ·Æ•§.
IF _MSP NE TRUE
PEREM_NLG       DD      0    ;  |
PEREM_NFZ       DD      0    ;  /
ENDIF
ASCII           DB      '0123456789ABCDEF'

;;; kill it !!!
TEMP_VAR        DW      40 dup (0)  ; ØÆ´• §†≠≠ÎÂ §´Ô ¢‡•¨•≠≠Æ£Æ Â‡†≠•≠®Ô

TIME_2MC        DW      0
DTIME_2MC	DD	0
Sys_Time        DD      0

EmptyStr2       DB      '  ', 0
                ; --- Ø‡Æ¢•‡™† Ø‡®ÂÆ§† ‚•·‚Æ¢ÎÂ ·ÆÆ°È•≠®© ëéêå
                DD      0
SORM_Test_Time  DD      0
_SORM_MAX_TIME  EQU     10 * 60 * 500   ; 10 ¨®≠„‚ !
SORM_Stoped	DB	0

                ; --- „Ø‡†¢´•≠®• ‚‡†≠·´ÔÊ®•© ™Æ≠‰®£„‡†Ê®® ëàÑë"„
Cfg_Send        DB      0       ; 0 - ™Æ≠‰®£„‡†Ê®Ô ≠• ¢Î§†¢†´†·Ï, ¨Æ¶≠Æ ¢Î§†‚Ï

                ; Includes for AX data segment
                INCLUDE COPMDAT.INC                 ; ß†£‡„ß™† §†≠≠ÎÂ ëéêå
IF _MSP EQ TRUE
                INCLUDE UPR\TO_COM.DAT              ; ß†£‡„ß™† §†≠≠ÎÂ ëéå ØÆ‡‚†
                INCLUDE UPR\ALTERA.DAT              ; §†≠≠Î• ALTERA
ENDIF
                INCLUDE UPATS.DAT
                INCLUDE MACR_SOR.INC                ; ®≠®Ê®†´®ß†Ê®Ô ¨†™‡Æ·Æ¢
                INCLUDE MO\MAC_MO.INC               ; ®≠®Ê®†´®ß†Ê®Ô ¨†™‡Æ·Æ¢ åé
                INCLUDE MO\MO.DAT                   ; ≠®Ê®†´®ß†Ê®Ô §†≠≠ÎÂ §´Ô åé ® ¨Æ§•¨Æ¢
                INCLUDE WIN_VIU.VAR                 ; §†≠≠Î• §´Ô ¢Î¢Æ§† ¢ ¢®§•ÆÆ°´†·‚Ï !!!!!!!
                INCLUDE PEREH_DN.INC                ; ÆØ‡•§•´•≠®• §®·™‡®Ø‚Æ‡Æ¢ ® Ø‡•‡Î¢†≠®©

                INCLUDE X_25\MAC_LAPD.INC
                INCLUDE EQU.ASM                     ; ÆØ‡•§•´•≠®• ··Î´Æ™ ≠† Æ°´†·‚® !!!
                INCLUDE X_25\LAPB.VAR
                INCLUDE X_25\HW_C101D.INC
                INCLUDE X_25\X_25_2.VAR

;;;                INCLUDE P5ZTIS.INC                  ; §´Ô Æ‚´†§™® ????
                INCLUDE KLADATA.INC                 ; ???? Ø•‡•¨•≠≠Î• ™´†¢®†‚„‡Î?
;;;                INCLUDE W5ZDATA.INC
                include lib\alarm.dat
                ; --- ≠Æ¢†Ô ™Æ≠‰®£„‡†Ê®Ô
                INCLUDE Config.DAT
                ; --- ØÆ´• ¢¢Æ§†
                INCLUDE Lib\Input.DAT
                ; --- Ì¨„´Ô‚Æ‡ ëéêå†
                INCLUDE Lib\SORMEmul.DAT

DOS_Flag        DB      0       ; 0 - Ø•‡•ß†£‡„ß™†, 1 - ¢ÎÂÆ§ ¢ DOS
DOS_mask_0      DB      0       ; §Æ·Æ¢·™†Ô ¨†·™† Ø‡•‡Î¢†≠®© Ø•‡¢Æ£Æ ™Æ≠‚‡Æ´´•‡†
DOS_mask_1      DB      0       ;                            ¢‚Æ‡Æ£Æ
No_Debug_Flag	DB	0
;;;!!!!!!!!!!!!!
IF _MSP NE TRUE
not_REL_SORM    DD      0
ENDIF
not_REL_SOED    DD      0
not_REL_Pass    DW      0
_NOT_REL_PASS_MAX =     100

; ************  í†°´®Ê† ™Æ§®‡Æ¢™® / §•™Æ§®‡Æ¢™® ¨Æ§•¨† MVT Ø•‡•≠•· 
KOD             DB      0,1,2,3,4,5,6,7,8,9,10
		DB	11,12,13,14,15,16,17,18,19,20
		DB	21,22,23,24,25,26,27,28,29,30
		DB	31,32,33,34,35,36,37,38,39,40
		DB	41,42,43,44,45,46,47,48,49,50
		DB	51,52,53,54,55,56,57,58,59,60
		DB	61,62,63,64,65,66,67,68,69,70
		DB	71,72,73,74,75,76,77,78,79,80
		DB	81,82,83,84,85,86,87,88,89,90
		DB	91,92,93,94,95,96,97,98,99,100
		DB	101,102,103,104,105,106,107,108,109,110
		DB	111,112,113,114,115,116,117,118,119,120
		DB	121,122,123,124,125,126,127,128,129,130
		DB	131,132,133,134,135,136,137,138,139,140
		DB	141,142,143,144,145,146,147,148,149,150
		DB	151,152,153,154,155,156,157,158,159,160
		DB	161,162,163,164,165,166,167,168,169,170
		DB	171,172,173,174,175,176,177,178,179,180
		DB	181,182,183,184,185,186,187,188,189,190
		DB	191,192,193,194,195,196,197,198,199,200
		DB	201,202,203,204,205,206,207,208,209,210
		DB	211,212,213,214,215,216,217,218,219,220
		DB	221,222,223,224,225,226,227,228,229,230
		DB	231,232,233,234,235,236,237,238,239,240
		DB	241,242,243,244,245,246,247,248,249,250
                DB      251,252,253,254,255

AXS_SIZE=$-NACH_AXS
DATA_AXS  ENDS

DATA_AXD        SEGMENT PARA USE16 PUBLIC 'DATA';ë•£¨•≠‚ ™Æ‰®£„‡†Ê®® 100-™†
NACH_AXD        LABEL   WORD
                INCLUDE TIS_DATA.INC
AXD_SIZE = $ - NACH_AXD
DATA_AXD        ENDS

DATA_BUS        SEGMENT PAGE USE16 PUBLIC 'DATA'
NACH_BUS        LABEL   WORD
                INCLUDE COPMBAS.INC             ; ‚†°´®Ê† ´Æ£†‡®‰¨† ® †≠‚® ...§´Ô ëéêå†
BUS_SIZE = $ - NACH_BUS
DATA_BUS        ENDS

DATA_TELEF      SEGMENT PARA USE16 PUBLIC 'DATA';
                ; --- ·Ø®·Æ™ Æ°Í•™‚Æ¢ ™Æ≠‚‡Æ´Ô ‚®Ø† Ø„ÁÆ™
Bunches         Obj_Struc       _BUNCH_MAX DUP(<>)
                ; --- ·Ø®·Æ™ Æ°Í•™‚Æ¢ ™Æ≠‚‡Æ´Ô ‚®Ø† ‚•´•‰Æ≠
Objects         Obj_Struc       _OBJ_MAX DUP(<>)
                ; --- ‰®™‚®¢≠Î© Æ°Í•™‚ §´Ô ØÆ§™´ÓÁ•≠®Ô äëã
Obj_for_Connect Obj_Struc       <>

DATA_TELEF      ENDS
;
DATA_SORM       SEGMENT PARA USE16 PUBLIC 'DATA';
                ; --- ·Ø®·Æ™ ·•··®©
Sessions        SORM_Struc      _SESSION_MAX DUP(<>)
DATA_SORM       ENDS
;
SCREEN_SEG_PCM  SEGMENT PARA USE16 PUBLIC 'DATA';ë•£¨•≠‚ §ÆØÆ´≠®‚•´Ï≠Æ£Æ Ì™‡†≠†
                DB      16000 dup (80) ; Ì™‡†≠ ëéêåÄ
                INCLUDE WINDOW.INC
SCREEN_SEG_PCM  ENDS
;
                ; ⁄ƒƒ èìåÄ ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
                ; ≥                               ≥
SCREEN_SEG_PUMA SEGMENT PARA USE16 PUBLIC 'DATA'; ≥
SCREEN_PUMA     LABEL   WORD                    ; ≥
                ; ‚Æ´Ï™Æ ÆØ‡•§•´•≠®Ô
                INCLUDE PUMA\COM_Drv.DAT        ; ≥
                INCLUDE PUMA\PUMAProt.DAT       ; ≥
                INCLUDE PUMA\RingBuff.DAT       ; ≥
                ; † ß§•·Ï •·‚Ï §†≠≠Î•
                INCLUDE PUMA\PUMA_Scr.DAT       ; ≥
                INCLUDE PUMA\CTO_Drv.DAT        ; ≥
                ; --- ÆØ®·†≠®Ô °„‰•‡Æ¢ ---------; ≥
                ; --- §‡†©¢•‡†                  ; ≥
PUMA_Drv_List   DD      _PUMA_CHNLS_CNT * 2 DUP( 256 )
                ; --- ·†¨† èìåÄ                 ; ≥
PUMA_Buf_List   DD      _PUMA_CHNLS_CNT * 2 DUP( _RBM + _PUMA_BUFF_SIZE )
SEG_PUMA_SIZE   = $ - SCREEN_PUMA               ; ≥
SCREEN_SEG_PUMA ENDS                            ; ≥
                ; ≥                               ≥
                ; ¿ƒƒ èìåÄ -ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ


CODE_AXS        SEGMENT PARA USE16 PUBLIC "CODE"
ASSUME  DS:DATA_AXS,CS:CODE_AXS
StartNew:
                CLI
                CLD
                mov     sp, offset Stack_start
                MOV     AX,DATA_AXS             ; Æ·≠Æ¢≠Æ© DATA ·•£¨•≠‚
                MOV     DS,AX                   ; ≠†·‚‡Æ®¨·Ô
                MOV     SS:SEG_AX,AX            ; ·ÆÂ‡†≠®¨

IF _MSP EQ TRUE
                MOV     AX,SCREEN_SEG_PCM       ; ≠†·‚‡Æ®¨·Ô ≠† ¢®‡‚„†´Ï≠Î© Ì™‡†≠
ELSE
                ; --- ÆØ‡•§•´•≠®• ≠†´®Á®Ô ¢®§•Æ†§†Ø‚•‡† ® ≠†·‚‡Æ©™† ¢®§•Æ‡•¶®¨† ---------------
                mov     ax, 1202h
                mov     bl, 30h
                int     10h                     ; 400 ·‚‡Æ™ ‡†ß¢•‡‚™®
                mov     ax, 3
                int     10h
                mov     ax, 1112h               ; ‰Æ≠‚ ®ß èáì §´Ô ´†‚®≠®ÊÎ
                int     10h

                mov     ax, 1003h
                xor     bl, bl
                int     10h                     ; ¢Î™´ÓÁ®‚Ï ¨•‡Ê†≠®• (Ô‡™®© ‰Æ≠)

                mov     ah, 1                   ; £†Ë•≠®• ™„‡·Æ‡†
                mov     ch, 020h
                int     10h

		; !!!!!!!!!!!!!!!!!!!!!
                call    InitPCI_4
                call    InitPCI_8
                ; !!!!!!!!!!!!!!!!!!!!!

                MOV     AX,0B800H               ; Ì™‡†≠
ENDIF
                MOV     SS:SEG_FS,AX            ; ·ÆÂ‡†≠®¨
                MOV     AX,0C800H               ; ·•£¨•≠‚ ·‚†≠Ê®® - 1
                MOV     SS:SEG_ST,AX            ; ·ÆÂ‡†≠®¨
                MOV     AX,0D000H               ; ·•£¨•≠‚ ·‚†≠Ê®® - 2
                MOV     SS:SEG_GS,AX            ; ·ÆÂ‡†≠®¨
                MOV     AX,SEG DATA_BUS         ;
                MOV     SS:SEG_BUS,AX           ; ·ÆÂ‡†≠®¨
                XOR     AX,AX                   ; ≠„´•¢Æ© ·•£¨•≠‚
                MOV     SS:SEG_NULL,AX          ; ·ÆÂ‡†≠®¨
IF _MSP EQ TRUE
                ; --- Æ·‚†≠Æ¢™† ™Æ¨¨„‚†‚Æ‡†
                MOV     ES,SS:SEG_ST
                mov     BYTE PTR es:[COM_MODE], 00h

                ; --- Ø‡Æ¢•‡Ô•¨ ¢•‡·®Ó àäå 0-·‚†‡Æ•, 1-≠Æ¢Æ•
                MOV     ES,ss:seg_gs            ; ATS1
                mov     ah,es:[5001h]           ; è•‡¢†Ô Ê®‰‡† ¢•‡·®®
                mov     al,es:[5002h]           ; Ç‚Æ‡†Ô Ê®‰‡† ¢•‡·®®
                mov     versiy, al              ; ß†Ø®·†´® ¢•‡·®Ó
                not     ax                      ; Ø•‡•¢•‡≠„´® °®‚Î
                mov     es:[5001h],ah           ;\ ß†Ø®Ë®¨ £†§Æ·‚Ï Á‚Æ°Î Ø‡Æ¢•‡®‚Ï
                mov     es:[5002h],al           ;/ ≠• Æ°ÎÁ≠†Ô ´® Ì‚Æ Ø†¨Ô‚Ï
                mov     dh,es:[5001h]           ;\ Ø‡ÆÁ®‚†•¨ Ø‡†¢®´Ï≠„Ó ¢•‡·®Ó
                mov     dl,es:[5002h]           ;/

                cmp     ax,dx                   ; Ø‡Æ¢•‡®¨ ®·™†ß®´Æ·Ï ´®?
                je      old_ikm1                ; ®·™†ß®´Æ·Ï, ß≠†Á®‚ •·‚Ï éáì ‚.•. ·‚†‡Î©
                mov     HardVers_hi, dh
                mov     HardVers_lo, dl
                mov     fg_prog,3               ;
                CMP     DH,2                    ; Ø‡Æ¢•‡®¨, ¨Æ≠Æ°´Æ™?
                JE      SHORT cont_init1        ; §† -> „©§•¨
                ; ß§•·Ï ≠• ¨Æ≠Æ°´Æ™
                CMP     DL,3                    ; ·‚†‡Î© ®™¨, §Æ 1.3 ¢•‡·®®
                JA      OLD_IKM1                ; JB ??? §† -> „©§•¨ ≠† ·‚†‡Æ• ¶•´•ßÆ
                MOV     VERSIY,DL               ; ®≠†Á• ≠Æ¢Î© àäå
                mov     fg_prog,1               ;
                jmp     cont_init1              ;
old_ikm1:
                mov     fg_prog,0               ;
                MOV     VERSIY,0                ;
cont_init1:
;;;                CALL    COMIN1                  ;
ELSE
                mov     fg_prog, 3              ; åëè-å !!!!
ENDIF
                ; --- ¨Æ¶≠Æ Ø•‡•ÂÆ§®‚Ï ¢ ß†È®È•≠≠Î© ‡•¶®¨
                JMP     PEREH

                INCLUDE PEREH_ZR.INC                ; °®°´®Æ‚•™† §´Ô Ø•‡•ÂÆ§† ¢ ß†È®È•≠≠Î© ‡•¶®¨...
                include lib\exc.asm                 ; °®°´®Æ‚•™† §´Ô Æ°‡†°Æ‚™® ®·™´ÓÁ•≠®©

PEREH:          @PEREH_ZR                       ; Ø•‡•©§•¨ ¢ ß†È®È•≠≠Î© ‡•¶®¨

               ; --- Æ°‡†°Æ‚™† Ø‡•§Î§„È•© ®·™´ÓÁ®‚•´Ï≠Æ© ·®‚„†Ê®®
                mov     fs, ss:SEG_BABA                 ;\
                mov     si, _BABA_FOR_EXC * 512         ;|
                cmp     byte ptr fs:[si],     'D'       ;|  Ø‡Æ¢•‡™† ≠†...
                jne     no_last_exc                     ;|  °Î´† ´® ¢ Ø‡ÆË´Î© ‡†ß
                cmp     byte ptr fs:[si + 1], 'E'       ;|  ®·™´ÓÁ®‚•´Ï≠†Ô ·®‚„†Ê®Ô
                jne     no_last_exc                     ;|
                cmp     byte ptr fs:[si + 2], 'B'       ;|
                jne     no_last_exc                     ;|
                add     si, 3                           ;|
                mov     di, offset ex                   ;|
                mov     cx, _exception_data_l           ;|  Ø•‡•Ø®·Ï Ø‡•§Î§„È•©
                push    ss                              ;|  ®·™´ÓÁ®‚•´Ï≠Æ© ·®‚„†Ê®®
                pop     es                              ;|  ¢ ·‚‡„™‚„‡„
                rep     movs byte ptr es:[di], fs:[si]  ;/
no_last_exc:
IF _MSP EQ TRUE
                ; --- Ø‡Æ£‡†¨¨®‡Æ¢†≠®• ÄãúíÖêÎ •·´® ≠„¶≠Æ
                cmp     fg_prog, 3              ; ¨Æ≠Æ°´Æ™
                jne     PM_NoProgAltera         ; ≠•‚ Ø‡Î£†•¨ §†´ÏË•
                MOV     CX, 6
SLED_PROPIS_IKM:PUSH    CX
                CALL    READ_DOP_INFO
                CALL    ALTERA_IN1_1
                MOV     DL, CL
                POP     CX
                OR      DL, DL
                JZ      PM_NoProgAltera
                INC     CUR_ALTERA_CHIP
                LOOP    SLED_PROPIS_IKM
                MOV     ES, SS:SEG_GS
                MOV     ES:[440CH], BYTE PTR 0
                MOV     ES:[440DH], BYTE PTR 0
                MOV     ES:[440EH], BYTE PTR 0
                MOV     ES:[440FH], BYTE PTR 0
                MOV     ES:[5051H], BYTE PTR 0H
                MOV     ES:[5052H], BYTE PTR 0H
                XOR     AL, AL
                MOV     ES:[4409H], AL
                MOV     ES:[440AH], AL
                MOV     ES:[440BH], AL
PM_NoProgAltera:
ELSE
                ; --- ·≠Ô‚®• ™Æ§®‡Æ¢™® · ‚†©¨-·´Æ‚Æ¢ „Ø‡†¢´•≠®Ô §´Ô °•ß¨Æ§•¨≠Æ£Æ ëéêå†
                mov     ax, _SEG_ALL
                mov     es, ax
        if _SORM_NO_MODEM eq TRUE
                mov     BYTE PTR es:[63h], 0c0h
        else
                mov     BYTE PTR es:[63h], 0
        endif

                ; --- HDD!!!
        	CALL_HDD InitHDD

                ; --- á†£‡„ß™† ™Æ≠‰®£„‡†Ê®®
                mov     edx, OFFSET _FILE_CFG_NAME
		CALL_HDD FileOpen
		jc  	Cfg_Open_2
Cfg_Read:
		xor	edx, edx
                mov     ecx, _FILE_CFG_SIZE
		CALL_HDD FileRead
		jc  	Cfg_Load_Err
		CALL_HDD FileClose
		jc  	Cfg_Load_Err
        	mov     si, offset LOG_LOADED_CFG
       	 	call    PrintLog
		jmp	no_Cfg_Load
Cfg_Load_Err:
        	mov     si, offset LOG_NO_CFG
       	 	call    PrintLogErr
		jmp	no_Cfg_Load
Cfg_Open_2:
                mov     edx, OFFSET _FILE_CFG_
		CALL_HDD FileOpen
		jnc  	Cfg_Read
no_Cfg_Load:

                ; --- á†£‡„ß™† Á•‡≠Æ£Æ ·Ø®·™†
                ; é‚™‡Î¢†•¨ ‰†©´ ß†≠Æ¢Æ
		lea     edx, _FILE_BLST_NAME
		CALL_HDD FileOpen
		mov 	_FILE_BLST_ID, eax
		jc	BLST_READ_End
                ; ëÁ®‚Î¢†•¨ ®ß ‰†©´†
		mov 	eax, _FILE_BLST_ID
		mov	ecx, _FILE_BLST_SIZE
		xor	edx, edx
		push	ds
		mov     ds, SS:SEG_BLK_LST
		CALL_HDD FileRead
		pop	ds
		jc  	BLST_READ_End
                ; á†™‡Î¢†•¨ ‰†©´
		mov 	eax, _FILE_BLST_ID
		CALL_HDD FileClose
		jc 	BLST_READ_End
BLST_READ_End:

                ; --- á†£‡„ß™† ·Ø®·™† ‡†ß‡•ËÒ≠≠ÎÂ Äéç
                xor     ax, ax
                mov     ecx, 100000h
                xor     edi, edi
                mov     es, ss:SEG_ANI_LST
		cld
		db	67
                rep     stosw
                ; é‚™‡Î¢†•¨ ‰†©´ ß†≠Æ¢Æ
                lea     edx, _FILE_ANI_NAME
		CALL_HDD FileOpen
                mov     _FILE_ANI_ID, eax
                jc      ANI_READ_Error
                ; ëÁ®‚Î¢†•¨ ®ß ‰†©´†
                mov     eax, _FILE_ANI_ID
                mov     ecx, _FILE_ANI_SIZE
		xor	edx, edx
		push	ds
                mov     ds, SS:SEG_ANI_LST
		CALL_HDD FileRead
		pop	ds
                jc      ANI_READ_Error
                ; á†™‡Î¢†•¨ ‰†©´
                mov     eax, _FILE_ANI_ID
		CALL_HDD FileClose
                jc      ANI_READ_Error
                jc      ANI_READ_End
ANI_READ_Error:
ANI_READ_End:

                ; --- á†£‡„ß™† ÆØ®·†≠®© Ø„Á™Æ¢
                mov     al, 0ffh
                mov     ecx, _BUNCH_NAME_OFFS ; == ¨•£†°†©‚ + 40 °†©‚
                xor     edi, edi
                mov     es, ss:SEG_BUNCH
		cld
		@_RSTOSB
                ; é‚™‡Î¢†•¨ ‰†©´ ß†≠Æ¢Æ
                lea     edx, _FILE_BUNCH_NAME
		CALL_HDD FileOpen
                mov     _FILE_BUNCH_ID, eax
                jc      Bunch_Read_Error
                ; ëÁ®‚Î¢†•¨ ®ß ‰†©´†
                mov     eax, _FILE_BUNCH_ID
                mov     ecx, _FILE_BUNCH_SIZE
		xor	edx, edx
		push	ds
                mov     ds, SS:SEG_BUNCH
		CALL_HDD FileRead
		pop	ds
                jc      Bunch_Read_Error
                ; á†™‡Î¢†•¨ ‰†©´
                mov     eax, _FILE_BUNCH_ID
		CALL_HDD FileClose
Bunch_Read_Error:

                ; --- ®≠®Ê®†´®ß†Ê®Ô
                ; ¶•´•ß†
ENDIF
                CALL    INIT_HARD
IF _MSP EQ TRUE
                ; --- ®≠®Ê®†´®ß®‡„•¨ Ì™‡†≠
                MOV     AX, 168
                MOV     SS:SEG_FS,AX
ELSE
                MOV     ES,SS:SEG_ST
ENDIF
                DB      9AH
                DW      OFFSET INIC_W_V
                DW      224
IF _MSP EQ TRUE
                CALL    INI_COM_CTO

ENDIF
                MOV     FS, SS:SEG_SOED
                MOV     GS, SS:SEG_KONF
                CALL    MOIN_1
IF _MSP EQ TRUE
if _SORM_NO_MODEM ne TRUE
        if 1;_BUN ne TRUE
                ; --- ¢™´ÓÁ•≠®• †°Æ≠•≠‚·™Æ£Æ ™Æ¨Ø´•™‚†
                mov     es, ss:SEG_GS                           ; ≠†·‚‡Æ®¨·Ô ≠† D000
                mov     BYTE PTR es:[5865h], 1                  ; †™‚®¢®‡„•¨ ®·‚. Ø®‚†≠®Ô ≠† Ø‡Æ£‡†¨¨®‡Æ¢†≠®•
                ;
                MOV     ES, SS:SEG_GS
                MOV     ES:[ADR_REG_AK],  BYTE PTR 0BBh         ; ØÆ§†Á† Ø®‚Ø≠®Ô ≠† Ää
                MOV     ES:[ADR_REG_AK1], BYTE PTR 80h          ; ‡†ß‡•Ë•≠®• ÆØ‡Æ·† Ää
                ;
                MOV     ES, SS:SEG_ST
                MOV     DI, 120                                 ; 120-© Ë†£ ™Æ¨¨„‚†Ê®®
                SHL     DI, 2
                ADD     DI, ADR_OZU_K1
                MOV     ES:[DI],    BYTE PTR 0                  ; \ ®ß 0-£Æ ™†≠†´† éáì §†≠≠ÎÂ
                MOV     ES:[DI+1],  BYTE PTR 1EH + _nom_ikm     ; / ¢ 30-© ™†≠†´ ñÄè (íë30 àäå)
                MOV     ES:[DI+4],  BYTE PTR 32                 ; \ ®ß 32-£Æ ™†≠†´† éáì §†≠≠ÎÂ
                MOV     ES:[DI+5],  BYTE PTR 1FH + _nom_ikm     ; / ¢ 31-© ™†≠†´ ñÄè (íë31 àäå)
                MOV     ES:[DI+8],  BYTE PTR 31  + _nom_ikm     ; \ ®ß 31-£Æ ™†≠†´† éáì §†≠≠ÎÂ
                MOV     ES:[DI+9],  BYTE PTR 32                 ; / ¢ 32-© ™†≠†´ ñÄè (Ää1)
                MOV     ES:[DI+12], BYTE PTR 30  + _nom_ikm     ; \ ®ß 30-£Æ ™†≠†´† éáì §†≠≠ÎÂ
                MOV     ES:[DI+13], BYTE PTR 00H                ; / ¢ 0-© ™†≠†´ ñÄè (Ää0)
        else
        endif
endif ; // _SORM_NO_MODEM
ENDIF
                JMP     BAGIN_    ; Ç‚Æ‡®Á≠†Ô ®≠®Ê®†´®ß†Ê®Ô
;                INCLUDE MACR_SOR.INC                ; ®≠®Ê®†´®ß†Ê®Ô ¨†™‡Æ·Æ¢
;                INCLUDE MO\MAC_MO.INC               ; ®≠®Ê®†´®ß†Ê®Ô ¨†™‡Æ·Æ¢ åé

                ; LOADING LIBRARY
                INCLUDE KLACODE.INC

                INCLUDE MO\MO.INC
                INCLUDE MO\MO_COM_B.INC ; ß†£´„Ë™® ® Ø´ÆÂ®• ™Æ¨†≠§Î
                INCLUDE MO\MO_COM.INC   ;
                INCLUDE MO\MO_SOED.INC  ;
                INCLUDE MO\MO_SORM.INC  ;
                INCLUDE MO\MO_SMESS.INC ;
                INCLUDE MO\MO_SESS.INC  ;
                INCLUDE MO\MO_KSL.INC   ;
IF _MSP EQ TRUE
                INCLUDE UPR\TO_COM.ASM
                include lib\confDrv.asm
ENDIF
                include lib\BlkLst.asm
                INCLUDE X_25\HW_C101C.INC
IF _MSP EQ TRUE
                INCLUDE UPR\ALTERA.ASM
                include lib\transf.asm
ENDIF
                include lib\tracer.asm
                include lib\alarm.asm

                ; --- ≠Æ¢†Ô ™Æ≠‰®£„‡†Ê®Ô
                INCLUDE Config.ASM
                ; --- ‡†°Æ‚† · Ø„Á™†¨®
                INCLUDE Bunch.ASM
                ; ---
                INCLUDE UPATS.ASM

                ; ⁄ƒƒ èìåÄ ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
                ; ≥                               ≥
                INCLUDE PUMA\COM_Drv.ASM        ; ≥
                INCLUDE PUMA\CTO_Drv.ASM        ; ≥
                INCLUDE PUMA\PUMA_Scr.ASM       ; ≥
                INCLUDE PUMA\PUMAProt.ASM       ; ≥
                INCLUDE PUMA\RingBuff.ASM       ; ≥
                ; ≥                               ≥
                ; ¿ƒƒ èìåÄ -ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
                INCLUDE PUMA\PUMA_Cmd.ASM       ; Ì‚Æ Á†·‚Ï Ø‡Æ£‡†¨¨Î, † ≠• °®°´®Æ‚•™®
MOIN_1D         PROC    FAR
                CALL    MOIN_1
                RETF
                ENDP
IF _MSP EQ TRUE
SAVE_CONFD      PROC    FAR
                CALL    SAVE_CONF
                RETF
                ENDP
ENDIF

BAGIN_:         ; Ç‚Æ‡®Á≠†Ô ®≠®Ê®†´®ß†Ê®Ô
IF _MSP EQ TRUE
                cmp     FG_PROG,0               ; ·Æ¢·•¨ ·‚†‡Æ• ¶•´•ßÆ
                JE      JUMP_OLD                ; §† -> Ø‡ÆØ„·‚®¨

                cmp     FG_PROG, 3              ; ¨Æ≠Æ°´Æ™?
                Je      END_SAVE_IKM            ; Ø‡ÆØ„·‚®¨ Ø‡ÆØ„·‚®¨ Ø‡ÆË®¢™„ àäå 1.5
                ; --- Ø‡ÆË®¢™† àäå 1.5
                CMP     VERSIY,2
                JB      END_SAVE_IKM;JUMP_OLD
                CALL    READ_DOP_INFO
                CALL    ALTERA_IN1
END_SAVE_IKM:
ELSE
                PUSH    ES
                PUSH    CX
ENDIF
                ; --- ÆÁ®·‚®¨ ·•£¨•≠‚ ‚†‡®‰®™†Ê®®
                MOV     ES,SS:SEG_TF
                MOV     AX,0FFFFh
                MOV     ECX,400000
                XOR     EDI,EDI
                @_RSTOSB
IF _MSP NE TRUE
                POP     CX
                POP     ES
ENDIF
                ; --- ·°‡Æ·®¨ ¢ ≠Æ´Ï ‚†‡®‰™†Ê®Æ≠≠Î• Ø†™•‚Î
                MOV     POS_TF,0
                MOV     SLED_TF,0

                ; --- ???
                MOV     ES,SS:SEG_GS
                MOV     ES:[5036H],BYTE PTR 00H ; Æ‚¨•≠®¨ ß†¢Æ‚Æ‡Î ≠† àäå
                MOV     ES:[5035H],BYTE PTR 0FH ; êÖÉ 35(áÄÇÄêéí)
                MOV     AL,0
                MOV     ES:[5036H],AL           ; Æ‚¨•≠®¨ ß†¢Æ‚Æ‡Î ≠† àäå
                mov     es:[5076h],al
                mov     es:[5078h],byte ptr 16
                mov     es:[5077h],byte ptr 0ffh
                mov     es:[5079h],byte ptr 1
                MOV     ES:[500BH],BYTE PTR 0H
                MOV     ES:[5027H],BYTE PTR 0H

JUMP_OLD:       OR      FG_INIC,M_OR_1          ; ØÆ¨•‚®¨ Á‚Æ ¶•´•ßÆ Ø‡®≠®Ê®†´®ß®‡Æ¢†≠Æ

                ; --- ß†Ø„·™ ™Æ¨¨„‚†‚Æ‡†
                MOV     ES,SS:SEG_ST
IF _MSP NE TRUE
                mov     BYTE PTR es:[COM_MODE], 0F0h    ; ß†Ø„·™ ™Æ¨¨„‚†‚Æ‡†
ELSE
                mov     BYTE PTR es:[COM_MODE], 070h    ; ß†Ø„·™ ™Æ¨¨„‚†‚Æ‡† safe mode
ENDIF
                ; ‡†ß‡•Ë•≠®• Ø‡•‡Î¢†≠®©
                mov     al, 11100000B                   ;íÄâåÖê
                out     021h, al                        ; ™´†¢† ® 2 ™Æ≠‚‡. Ø‡-©
                mov     AL, 01110011B
                OUT     0A1H,AL
                mov     al, 020h
                out     020h, al
                out     0a0h, al
                sti
IF _MSP EQ TRUE
                call    INIC_HARD_C101
ENDIF
                ; •È• ‡†ß ®≠®Ê®†´®ß®‡„•¨ îÄèó
                call    Fapch_Init
IF _MSP EQ TRUE
                ; --- äéååìíÄñàü Ñãü êÄÅéíõ ë ñíé
                @COMM_CTO

                ; --- ‡†°Æ‚† · Ø„Á™†¨®
                call    Bunch_Define            ; ß†£´„Ë™† - ¢ ‡„Á≠„Ó ß†ØÆ´≠Ô•¨ Tranks
                call    Bunch_Init              ; Á®·‚®¨ SEG_BUNCH
                call    Bunch_Calc              ; ß†ØÆ´≠Ô•¨ SG_BUNCH ≠† Æ·≠Æ¢• ®≠‰Æ‡¨†Ê®® ®ß Tranks

                ; --- ®≠®Ê®†´®ß†Ê®Ô ™Æ≠‰®£„‡†Ê®®
                call    StartConfig
ELSE
                mov     al, 0c1h
		out	21h, al
		mov	al, 0ffh
		out	0a1h, al
		xor	al, al
		out	70h, al
		sti

                mov     es, ss:SEG_GS
                mov     es:[5871h], BYTE PTR 7
                mov     es:[440ah], BYTE PTR 3

                cld                             ;
                ; --- ‡†°Æ‚† · Ø„Á™†¨®
                call    Bunch_Define            ; ß†£´„Ë™† - ¢ ‡„Á≠„Ó ß†ØÆ´≠Ô•¨ Tranks
                call    Bunch_Init              ; Á®·‚®¨ SEG_BUNCH
                call    Bunch_Calc              ; ß†ØÆ´≠Ô•¨ SG_BUNCH ≠† Æ·≠Æ¢• ®≠‰Æ‡¨†Ê®® ®ß Tranks
                call    StartConfig             ;

                @COMM_CTO                       ; „·‚†≠Æ¢™† ™Æ¨¨„‚†Ê®® §´Ô ñíé
ENDIF
                ; --- ®≠®Ê®†´®ß†Ê®Ô èìåÎ
                mov     eax,0ffffffffh          ;
IF _MSP EQ TRUE
                mov     al, _PT_COM2            ;
ELSE
                mov     al, _PT_COM1
ENDIF
                mov     ah, _PT_CTO             ;
                mov     bl, _BABA_FROM_CTO      ; 14
                mov     bh, _BABA_TO_CTO        ; 15
                call    PUMA_Init               ;
                xor     ebx, ebx                ;
                call    PUMA_Set_Tar            ;
                ; --- ¢ ´Æ£ - Æ‚¨•‚®¨ ß†Ø„·™ Ø‡Æ£‡†¨¨Î
                test    FG_PROGRAM, M_OR_15     ;
                jz      No_SORM_LOG_Start       ;
                call    PUMA_Start_Tar          ;
                mov     al, 8fh                 ;
                @_STOSB                         ;
                mov     al, 0ffh                ;
                @_STOSB                         ;
                call    PUMA_Send_Tar           ;
No_SORM_LOG_Start:
                ; ---- {Paul} --- (26\12\11) ---
                ; --- ·Á®‚†•¨ ‰´†£® Æ‚°Æ‡† ™Æ¨†≠§
                push    ax
                mov     ax, FG_Curr_MO_Conf
                or      FG_Curr_MO_Num, ax
                pop     ax
                DB      9AH                     ;\
                DW      OFFSET Refresh_MO_Slct_Win_Far ;| Æ°≠Æ¢®¨ Æ™≠Æ ¢Î°Æ‡† ™Æ¨†≠§ åé
                DW      224                     ;/
                ; ---- {END} ------
                call    Tracer_Init

if _MSP NE TRUE
if _debugFile  ; MVT - Æ‚™‡Î‚®• ‰†©´† §´Ô ¢Î¢Æ§† Æ‚´†§ÆÁ≠Æ© ®≠‰Æ‡¨†Ê®®
		call	open_debug_file
endif
endif
;          ___________________________________________     _  _     ___________
;\        /         Let`s Blood Battle Begin          \   / \/ \   /
; \______/ _*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_ \_/\_/\_/\_/
; /      \  * * * * * * * * * * * * * * * * * * * * *  / \/ \/ \/ \
;/        \___________________________________________/   \_/\_/   \___________

BAGIN:          ; ®·‚®≠≠Æ• ≠†Á†´Æ Ê®™´†
public BAGIN
@Tracer_Step 100h
                mov     fs, ss:SEG_FS           ;
                xor     esi, esi                ;
                call    PUMA_Call               ;
                xor     ebx, ebx                ;
In_PUMA:        call    PUMA_In                 ;
                jecxz   Next_PUMA               ;
                call    PUMA_Cmd                ;
                jmp     In_PUMA                 ;
Next_PUMA:      inc     ebx                     ;
		cmp	ebx, _PUMA_CHNLS_CNT    ;
                jb      In_PUMA                 ;

@Tracer_Step 200h
                cmp     SOST_VIU5, _TC_Ctrl
                jne     @@no_tc
                DB      9AH                     ;\
                DW      OFFSET Refresh_TC_Far   ;|  ™Æ≠‚‡Æ´Ï íó ëéêå†
                DW      224                     ;/
@@no_tc:
IF _MSP EQ TRUE
if 01
                cmp     SOST_VIU5, _OZUK
                jne     @@no_ozuk
                DB      9AH                     ;\
                DW      OFFSET Refresh_OZUK_Far ;|  ™Æ≠‚‡Æ´Ï éáì ™Æ¨¨„‚†Ê®®
                DW      224                     ;/
@@no_ozuk:
endif
ENDIF
IF _MSP EQ TRUE
                ; Watch Dog §´Ô ·‚†‡Æ£Æ ¶•´•ß†
                push    ds ax                   ;\
                mov     ds, ss:SEG_AX           ;|
                xor     FiltrRM, 080h           ;|
                mov     al, FiltrRM             ;| WATCHDOG programm -=> old IRON <=-
                mov     ds, ss:seg_st           ;|
                mov     ds:[ADR_REG_FILT], al   ;|
                pop     ax ds                   ;/

                mov     ds, ss:seg_ax
                cmp     INT_5, 0
                je      return_x
                MOV     INT_5,0                 ;ë°‡Æ· Ø‡®ß≠†™† Ø‡®•¨† ™´†¢®Ë®
                MOV     AL,KLAV                 ;Ç SI - SCAN-™Æ§
                @INT_5
RETURN_x:
ENDIF
@Tracer_Step 300h
                call    Check_SORM              ;
IF _MSP NE TRUE
                cld     ;;;!!!
		cmp	No_Debug_Flag, 0
		jne	No_Debug
		@DEBUG_PRINT
No_Debug:
                @TC_Debug

; - - - - - - - - - - - - - - -  î Ä è ó - - - - - - - - - - - - - - - - - - -
;

                ; îÄèó
                CALL_PLL _CONTROL_CHANAL

                ; •·´® ¢™´ÓÁ•≠† Ø‡Æ¢•‡™† ‚•·‚Æ¢ÎÂ ·ÆÆ°È•≠®©
                cmp     FG_SOST, 0
                je      No_SORM_Test_Check
                mov     eax, Current_Time
                sub     eax, SORM_Test_Time
                cmp     eax, _SORM_MAX_TIME
                jbe     No_SORM_Test_Check
                ;mov     SORM_Stoped, 255
No_SORM_Test_Check:

if _debugFile
	call display_debug_file_size
endif
ENDIF


               call    SetTime                 ;

                call    AskConfig               ;
                call    GetNewConfig            ;
                call    GetOldConfig            ;

@Tracer_Step 400h
                CALL    MOIN_2                  ;
@Tracer_Step 500h
IF _MSP EQ TRUE
                ; --- Æ°‡†°Æ‚™† ÆË®°Æ™ - ØÆÂÆ¶• £§•-‚Æ ¢≠„‚‡® Æ°‡†°†‚Î¢†•‚·Ô mono watch-dog
                call    AlarmProccess           ; Æ°‡†°Æ‚™† ÆË®°Æ™ ØÆ èìå•
                call    AlarmManager            ; Æ°‡†°Æ‚™† ÆË®°Æ™ ØÆ ≠Æ¢Æ¨„
ENDIF
@Tracer_Step 600h

                ; --- Æ°‡†°Æ‚™† Æ·≠Æ¢≠Æ£Æ Ê®™´† ≠Æ ¢ §‡„£Æ¨ ™Æ§Æ¢Æ¨ ·•£¨•≠‚•
                DB      9AH                     ;\
                DW      OFFSET WIN_SORM_GO      ;|  Ì™‡†≠ ® Á†·‚® ëéêå†
                DW      224                     ;/
@Tracer_Step 700h
IF _MSP EQ TRUE
        if _SORM_NO_MODEM eq TRUE
                call    c101_go_new             ; ¢ÎßÆ¢®¨ Æ°‡†°Æ‚™„ HDLC
        else
                test    FG_PROG, _b_01          ; ≠Æ¢Æ• ¶•´•ßÆ?
                jz      @@old_modem             ; ≠•‚, Ø‡ÆØ„·‚®¨
                call    C101_GO_NEW             ; ¢ÎßÆ¢®¨ Æ°‡†°Æ‚™„ HDLC
                jmp     @@c101_go_end
@@old_modem:    call    C101_GO                 ; ¢ÎßÆ¢®¨ Æ°‡†°Æ‚™„ HDLC ≠† ë101
@@c101_go_end:
        endif
ELSE
                call    C101_Go_New
                ; WatchDog
                cmp     WD_Reboot, 0
                jnz     BAGIN
                mov     fs, ss:SEG_MAX_II
                mov     edx, ss:Curr_T
                sub     edx, WD_Time
                cmp     edx, _WD_TOUT
                jb      BAGIN
                mov     edx, ss:Curr_T
                mov     WD_Time, edx
                xor     WD_Value, 80h
                mov     al, WD_Value
                mov     fs:[ADR_WD], al
ENDIF

@Tracer_Step 800h

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;
                test    FG_PROGRAM, _fg_prg_debug
                jz      @@not_dd
                mov     ah, cBLUE * 16 + clRED
		; ---
; MVT ®ß¨•≠®´ ‰Æ‡¨„ ¢Î¢Æ§† Æ‚´†§ÆÁ≠ÎÂ Ø•‡•¨•≠≠ÎÂ
		mov	cx, 35
		lea	si, _1st_dd
		mov	di, 160 + 63 * 2
@@dd1:          push    cx
	        movzx	ebx, cx
		sub	ebx, 36
		neg	ebx
		mov	cx, 2
		call	print_D 
                add	di, 8
	        mov	ebx, [si]
		mov	cx, 8
                call    print_H
		pop	cx
		add	di, 152
		add	si, 4
		loop	@@dd1
		; ---
;		mov	cx, 20
;                lea     si, _4th_dd
;                mov     di, 160 + 71 * 2
;@@dd2:          push    cx
;	        mov	ebx, [si]
;		mov	cx, 8
;                call    print_H
;                pop     cx
;		add	di, 160
;		add	si, 4
;		loop	@@dd2
		; ---

;		mov	cx, 15
;                lea     si, _4th_dd
;                mov     di, 51 * 2
;@@dd3:          push    cx
;	        mov	ebx, [si]
;		mov	cx, 8
;                call    print_H
;		pop	cx
;		add	di, 160
;		add	si, 4
;                loop    @@dd3
@@not_dd:


                JMP     BAGIN           ; ™ ≠†Á†´„ Ê®™´†!!!
;               \\ ≥≥ //         /\
;                \\≥≥//         /≥≥\
;                 \\//         /∫≥≥∫\
;                  \/         //∫≥≥∫\\
;                 ∫  ∫          ∫≥≥∫
;                 ∫≥≥»ÕÕÕÕÕÕÕÕÕÕº≥≥∫
;                 ∫¿¡ƒƒƒƒƒƒƒƒƒƒƒƒ¡Ÿ∫
;                 »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº
; MVT á†≠Æ·®¨Î¨ ¢ Æ‚´†§™„ Ø†‡†¨•‚‡Æ¨ Ô¢´Ô•‚·Ô eax
value_to_ddebug_proc proc far
		push	ds
		mov	ds,SS:SEG_AX
		;cmp	ds:__dd1, 0   ; __dd1 ·´„¶®‚ ¢™´ÓÁ†‚•´•¨
		;je	skip_debug_writing
		cmp	ds:__dd_num,35
		jae	skip_debug_writing
		push	ebx
		movzx	ebx, ds:__dd_num
		shl	ebx,2
		mov	ds:_1st_dword[ebx],eax
		inc	ds:__dd2
		inc	ds:__dd_num
		pop	ebx
skip_debug_writing:	
		pop	ds
		retf
value_to_ddebug_proc endp

if _MSP NE TRUE
if _debugFile  
; MVT é‚™‡Î‚®• Æ‚´†§ÆÁ≠Æ£Æ ‰†©´†
; ÇÂÆ§: ≠•‚
; ÇÎÂÆ§: ¢ ·´„Á†• „§†Á® DebugFileDescriptor ·Æ§•‡¶®‚ §•·™‡®Ø‚Æ‡, DebugFileOpened = 1
;        ¢ ·´„Á†• ≠•„§†Á® DebugFileDescriptor ≠•ÆØ‡•§•´Ò≠, DebugFileOpened ≠• ¨•≠Ô•‚·Ô
open_debug_file	proc	
		push	ds edx eax ecx ebp
		mov	ds,SS:SEG_AX
		mov	isDebugFileOverflow, 0
		lea	edx, DebugFile
		mov	ebp,0
		CALL_HDD 	FileOpen
		jnc	@@ok_open
		mov	ebp,0
		CALL_HDD     FileCreate  ; EAX = ®§•≠‚®‰®™†‚Æ‡ ‰†©´†
		jc	@@end_open
@@ok_open:
		mov	DebugFileDescriptor,eax
		mov	ebp,0
		CALL_HDD 	FileSize
		mov	CurrentDebugFileSize,ecx
		jc	@@end_open
		mov	ebp,0
		CALL_HDD 	FileSeek
		jc	@@end_open
		mov	DebugFileOpened,2
		call write_cr_lf_to_debug_file
		mov	ebx,ss:Curr_T
		mov	ecx,8
		call write_ebx_to_debug_file
		lea	edx,DebugFileHeader
		mov	ecx,15
		call 	write_to_debug_file
		call	write_cr_lf_to_debug_file
		push	ds
		mov	ds,ss:SEG_PCM
		mov	edx,offset version_m
		mov	ecx,14
		call 	write_to_debug_file
		pop	ds
		call	write_cr_lf_to_debug_file
		mov	DebugFileOpened,1
@@end_open:
		pop	ebp ecx eax edx ds
		call	check_debug_file_size	
		ret
open_debug_file	endp		
		
; MVT á†Ø®·Ï ·‚‡Æ™® ¢ Æ‚´†§ÆÁ≠Î© ‰†©´
; á†Ø®·Ï Ø‡Æ®ß¢Æ§®‚·Ô Ø‡® DebugFileOpened =/= 0
; ÇÂÆ§: ds:edx - †§‡•· ·‚‡Æ™®
;       ecx - Á®·´Æ ß†Ø®·Î¢†•¨ÎÂ °†©‚
; ÇÎÂÆ§: ≠•‚
write_to_debug_file	proc	
		push	eax 
		push	ds
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		pop	ds
		or	al,al
		jz	@@skip_write_debug
		call	file_write_buf
@@skip_write_debug:
		pop	eax 
		ret
write_to_debug_file	endp

; MVT á†Ø®·Ï Ø‡Æ°•´† ¢ Æ‚´†§ÆÁ≠Î© ‰†©´
; ÇÂÆ§: ≠•‚
; ÇÎÂÆ§: ≠•‚
write_space_to_debug_file	proc	
		push	ds edx ecx eax
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		or	al,al
		jz	@@skip_write_space
		mov	ecx,1
		lea	edx,space_symb
		call	file_write_buf
@@skip_write_space:
		pop	eax ecx edx ds
		ret
write_space_to_debug_file	endp

; MVT á†Ø®·Ï Ø•‡•¢Æ§† ·‚‡Æ™® CR LF ¢ Æ‚´†§ÆÁ≠Î© ‰†©´
; ÇÂÆ§: ≠•‚
; ÇÎÂÆ§: ≠•‚
write_cr_lf_to_debug_file	proc	
		push	ds edx ecx eax
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		or	al,al
		jz	@@skip_write_cr_lf
		mov	ecx,2
		lea	edx,cr_lf
		call	file_write_buf
@@skip_write_cr_lf:
		pop	eax ecx edx ds
		ret
write_cr_lf_to_debug_file	endp

; MVT á†Ø®·Ï ‚‡†··®‡Æ¢ÆÁ≠Æ© ·‚‡Æ™® ici ¢ Æ‚´†§ÆÁ≠Î© ‰†©´
; ÇÂÆ§: edx - ≠Æ¨•‡ ‚‡†··®‡„•¨Æ£Æ ¨•·‚† 
; ÇÎÂÆ§: ≠•‚
; è†‡†¨•‚‡ ≠• ·ÆÂ‡†≠Ô•‚·Ô
write_ici_to_debug_file	proc	
		push	ds ebx ecx eax
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		or	al,al
		jz	@@skip_write_ici
		lea	ebx,ici
		add	edx,48
		mov	[ebx+3],dl
		mov	edx,ebx
		mov	ecx,5
		call	file_write_buf
@@skip_write_ici:
		pop	eax ecx ebx ds
		ret
write_ici_to_debug_file	endp

; MVT á†Ø®·Ï Á®·´† ¢ °„‰•‡ ¢ ·®¨¢Æ´Ï≠Æ¨ ¢®§•
; ÇÂÆ§: ebx - Á®·´Æ, ecx - Á®·´Æ ‚•‚‡†§, eax - ≠†Á†´Ï≠†Ô ØÆß®Ê®Ô ¢ °„‰•‡•
; ÇÎÂÆ§: eax - ≠Æ¢†Ô ØÆß®Ê®Ô ¢ °„‰•‡•
ebx_to_buffer	proc
		push	ecx edi edx ds
		mov	ds,SS:SEG_AX
		lea	edi,DebugFileHexBuffer
		add	edi,eax
		dec	ecx
		and     cl, 7
@@loop:
		push    cx
		shl     cl, 2
		mov     edx, ebx
		shr     edx, cl
		and     dl, 0Fh
		cmp     dl, 9
		jbe     @@no_hex
		add     dl, 'A' - '9' - 1
@@no_hex:
		add     dl, '0'
		mov	ds:[edi],dl
		inc	edi
		inc	eax
		pop     cx
		dec     cl
		jns     @@loop
		pop	ds edx edi ecx
		ret
ebx_to_buffer	endp

; MVT á†Ø®·Ï Á®·´† ¢ Æ‚´†§ÆÁ≠Î© ‰†©´
; á†Ø®·Ï Ø‡Æ®ß¢Æ§®‚·Ô Ø‡® DebugFileOpened =/= 0
; ÇÂÆ§: ebx - Á®·´Æ, ecx - Á®·´Æ ‚•‚‡†§
; ÇÎÂÆ§: ≠•‚
write_ebx_to_debug_file	proc	
		push	eax ds ecx edx edi
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		or	al,al
		jz	@@skip_write_debug
		mov	eax,0
		call	ebx_to_buffer
		lea	edx,DebugFileHexBuffer
		call	file_write_buf
@@skip_write_debug:
		pop	edi edx ecx ds eax 
		ret
write_ebx_to_debug_file	endp

; MVT á†Ø®·Ï ¨†··®¢† °†©‚Æ¢ ¢ Æ‚´†§ÆÁ≠Î© ‰†©´ ¢ ·®¨¢Æ´Ï≠Æ¨ ¢®§•
; á†Ø®·Ï Ø‡Æ®ß¢Æ§®‚·Ô Ø‡® DebugFileOpened =/= 0
; ÇÂÆ§: ds:esi - †§‡•· ¨†··®¢† °†©‚Æ¢, ecx - Á®·´Æ °†©‚Æ¢
; ÇÎÂÆ§: ≠•‚
write_array_to_debug_file	proc
		push 	ebx ecx edx eax edi
		push	es
		push	ds
		pop	es
		push	ds
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		or	al,al
		jz	@@skip_write_debug
		mov	eax,0
@@next_byte:
		push	ecx
		movzx	ebx, byte ptr es:[esi]
		mov	ecx, 2
		call	ebx_to_buffer
		lea	edi,DebugFileHexBuffer
		add	edi,eax
		mov	byte ptr [edi],'.'
		inc	eax
		pop	ecx
		inc	esi
		loop	@@next_byte
		lea	edx,DebugFileHexBuffer
		mov	ecx,eax
		call	file_write_buf
		call	write_cr_lf_to_debug_file
@@skip_write_debug:
		pop	ds
		pop	es
		pop	edi eax edx ecx ebx
		ret
write_array_to_debug_file	endp

; MVT ß†™‡Î‚®• Æ‚´†§ÆÁ≠Æ£Æ ‰†©´†
; á†™‡Î‚®• Ø‡Æ®ß¢Æ§®‚·Ô Ø‡® DebugFileOpened =/= 0
; ÇÂÆ§: ≠•‚
; ÇÎÂÆ§: ≠•‚
close_debug_file	proc
		push	eax edx ecx ds
		mov	ds,SS:SEG_AX
		mov	al, DebugFileOpened
		or	al,al
		jz	@@skip_write_debug
                mov	DebugFileOpened, 2
		lea	edx,DebugFileBottom
		mov	ecx, 15
		call 	write_to_debug_file
if _isDebugBuffered
		call	flush_buffer_to_file
		call	write_cr_lf_to_debug_file ; é°Ôß†‚•´Ï≠Æ, ‚.™. ØÆ·´•§≠ÔÔ FileWrite ≠• ·ÆÂ‡†≠Ô•‚·Ô
		call	flush_buffer_to_file
else
		call	write_cr_lf_to_debug_file ; é°Ôß†‚•´Ï≠Æ, ‚.™. ØÆ·´•§≠ÔÔ FileWrite ≠• ·ÆÂ‡†≠Ô•‚·Ô
endif
		mov	DebugFileOpened, 0
		mov	eax,DebugFileDescriptor
		push	ebp
		mov	ebp,0
		CALL_HDD 	FileClose
		pop	ebp
@@skip_write_debug:
		pop	ds ecx edx eax 
		ret
close_debug_file	endp

close_debug_file_far	proc far
		call	close_debug_file
		retf
close_debug_file_far	endp

; MVT ë°‡Æ· °„‰•‡† Æ‚´†§ÆÁ≠Æ£Æ ‰†©´† Ø‡® ¢™´ÓÁÒ≠≠Æ¨ _isDebugBuffered
; ‚‡•°„•‚ DebugFileOpened != 0
if _isDebugBuffered
flush_buffer_to_file	proc
		push	ds edx ecx eax ebp
		mov	ds,SS:SEG_AX
		lea	edx,DebugFileBuffer
		mov	ecx,DebugFileBufferPos
		mov	eax,DebugFileDescriptor
		mov	ebp,0
		CALL_HDD 	FileWrite 
		mov	DebugFileBufferPos, 0
		pop	ebp eax ecx edx ds
		ret
flush_buffer_to_file	endp
endif

; MVT Ø•‡•≠Æ· ¢ °„‰•‡ ·‚‡Æ™® §´Ô °„‰•‡®ßÆ¢†≠≠Æ£Æ ¢Î¢Æ§† ® ß†Ø®·Ï §´Ô ≠•°„‰•‡®ßÆ¢†≠≠Æ£Æ
; ÇÂÆ§: ds:edx - †§‡•· ·‚‡Æ™®, ecx - ™Æ´®Á•·‚¢Æ °†©‚
; ÇÎÂÆ§: ≠•‚
; é°≠Æ¢´Ô•‚ ‡†ß¨•‡ Æ‚´†§ÆÁ≠Æ£Æ ‰†©´† ¢ Ø•‡•¨•≠≠Æ© CurrentDebugFileSize
; á†™‡Î¢†•‚ ‰†©´, •·´® Æ≠ ¢•´®™
; ‚‡•°„•‚ DebugFileOpened != 0
file_write_buf proc
		push	ecx
if _isDebugBuffered
		push 	es edi esi
		mov	es,SS:SEG_AX
		mov	edi,es:DebugFileBufferPos
		add	edi,ecx
		cmp	edi,_DebugBufferSize
		jb	skip_flush_buffers ; •·´® °„‰•‡ Ø•‡•ØÆ´≠•≠, Ø‡•§¢†‡®‚•´Ï≠Æ ·°‡†·Î¢†•¨ •£Æ
		call 	flush_buffer_to_file
skip_flush_buffers:
		lea	edi,DebugFileBuffer
		add	edi,es:DebugFileBufferPos
		add	es:DebugFileBufferPos,ecx
		mov	esi,edx
		cld
		rep movsb
		pop	esi edi es
else		
		push	ebp
		mov	ebp,0
		push	ds
		mov	ds,SS:SEG_AX
		mov	eax,DebugFileDescriptor
		pop	ds
		CALL_HDD	FileWrite 
		pop	ebp
endif
		pop	ecx
		add	CurrentDebugFileSize,ecx
		cmp	DebugFileOpened, 2
		je	@@skip_check_file_size  ; † ‚Æ ØÆ©§Ò‚ ØÆ ™‡„£„
		call	check_debug_file_size	
@@skip_check_file_size:
		ret
file_write_buf endp

; MVT Æ‚Æ°‡†¶•≠®• §´®≠Î Æ‚´†§ÆÁ≠Æ£Æ ‰†©´†
display_debug_file_size	proc
		push	ecx eax ds esi edi
		mov	ds,SS:SEG_AX
		cmp	isDebugFileOverflow, 0
		je	@@skip_display_overflow
		mov	ecx,8
		lea	esi,NoDebugFileSize
		mov	ah, DebugFileSizeColor
		mov	edi, 160 * 34 + 20
		call	print_S ; ·ÆÆ°È†•¨ ≠† Ì™‡†≠, Á‚Æ ´Æ££®‡Æ¢†≠®• Ø‡•‡¢†≠Æ
		jmp	@@end_display
@@skip_display_overflow:
		mov	al, DebugFileOpened
		or	al,al
		jz	@@end_display
		mov	ebx,CurrentDebugFileSize
		mov	ecx,8
		mov	ah, DebugFileSizeColor
		mov	edi, 160 * 34 + 20
		call	Print_H          
@@end_display:
		pop	edi esi ds eax ecx
		ret
display_debug_file_size	endp


; MVT Ø‡Æ¢•‡™† ‡†ß¨•‡† Æ‚´†§ÆÁ≠Æ£Æ ‰†©´†. á†™‡Î¢†•‚ ‰†©´, •·´® Æ≠ ¢•´®™
; ‚‡•°„•‚ DebugFileOpened != 0
check_debug_file_size	proc
		push	eax ds 
		mov	ds,SS:SEG_AX
		mov	eax,CurrentDebugFileSize
if _isDebugBuffered
		add	eax,_DebugBufferSize
else
		add	eax,_DebugWriteSize
endif
		cmp	eax,_DebugFileMaxSize
		jna	@@no_close
		mov	isDebugFileOverflow, 1
		push	ecx edx
                mov	DebugFileOpened, 2
		lea	edx,BreakDebugFile
		movzx	ecx, BreakDebugFileLen
		call 	write_to_debug_file ; ¢Î¢Æ§®¨ ¢ ‰†©´, Á‚Æ ´Æ££®‡Æ¢†≠®• Ø‡•‡¢†≠Æ
		pop 	edx ecx 
		call	close_debug_file
@@no_close:
		pop	ds eax
		ret
check_debug_file_size	endp

; MVT ÆÁ®·‚™† Æ‚´†§ÆÁ≠Æ£Æ ‰†©´†
clear_debug_file proc far
		call	close_debug_file
		push	DS EDX ebp
		mov	ds,SS:SEG_AX
		lea	edx, DebugFile
		mov	ebp,0
		CALL_HDD FileEraseName
		pop	ebp edx	ds
		call	open_debug_file
		retf
clear_debug_file endp
		
endif ; _debugFile
endif ; MSP

;;;; Ø•‡•ß†£‡„ß™† ≠†§Æ °„§•‚ ØÆ‚Æ¨ ≠†©‚® ‚ÆÁ™® ¢ÂÆ§† ·Ó§† ® ®·Ø‡†¢®‚Ï ´Æ£®™„
PEREZAGRUSKA1:  INT     3

SORM_SIZE = $ - START
CODE_AXS        ENDS

CODE_AXD        SEGMENT PARA USE16 PUBLIC "CODE"
                ASSUME  DS:DATA_AXS,CS:CODE_AXD
D_START         DB   3
                ; °®°´®Æ‚•™® ëéêå†
                INCLUDE X_25\X_25_3N.INC
                INCLUDE X_25\LAPB.INC
                INCLUDE X_25\INIC.INC
                INCLUDE X_25\CIKL.INC
                INCLUDE X_25\SDL_LAPD.INC
                INCLUDE COPMCOD.INC
                ; °®°´®Æ‚•™® ¢Î¢Æ§† ≠† Ì™‡†≠
                INCLUDE WIN_KLA.INC
                INCLUDE WIN_VIU.INC
                ; --- ØÆ´• ¢¢Æ§†
                INCLUDE Lib\Input.INC
                ; --- Ì¨„´Ô‚Æ‡ ëéêå†
                INCLUDE Lib\SORMEmul.INC

DOP_SIZE = $ - D_START
CODE_AXD        ENDS

        END     START


