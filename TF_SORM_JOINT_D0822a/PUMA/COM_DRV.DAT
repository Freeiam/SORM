; ╔════════════════════════════════════════════════════════════════════════════╗
; ║  Файл:         Com_drv.DAT                                                 ║
; ║  Программист:  Тычков Константин Викторович +7 903 381 64 67               ║
; ║  Версия:       15.06.2004                                                  ║
; ╟────────────────────────────────────────────────────────────────────────────╢
; ║  Требует:      Com_Drv.ASM                                                 ║
; ╟────────────────────────────────────────────────────────────────────────────╢
; ║  Используется: работа с COM портом (переменные и константы)                ║
; ╟────────────────────────────────────────────────────────────────────────────╢
; ║  Содержит:                                                                 ║
; ║                                                                            ║
; ║                                                                            ║
; ║                                                                            ║
; ╚════════════════════════════════════════════════════════════════════════════╝

;*****************************************************************
;  Данные для COM porta
;*****************************************************************
_COM_SPEED      EQU     1               ; Скорость передачи COM(дел-ль)  115 kbit/s
_ADR_COM_1      EQU     3F8h            ; базовый адрес первого сом порта
_ADR_COM_2      EQU     2F8h            ; базовый адрес второго сом порта
_MASK_PORT_1    EQU     00010000b       ;\ маски прерываний
_MASK_PORT_2    EQU     00001000b       ;/
_VECT_COM_1     EQU     30h             ; вектор первого сом порта
_VECT_COM_2     EQU     2Ch             ; вектор второго сом порта

;╔╦╦╗       ╔╦╦╗   ╔╦╦╦╦╦╗    ╔╦╦╦╦╦╗   ╔╦╦╦╦╦╦╗    ╔╦╦╦╦╦╗
;╠╬╬╬╗     ╔╬╬╬╣  ╔╬╬╩╩╩╬╬╗  ╔╬╬╩╩╩╬╬╗  ╠╬╬╩╩╩╬╬╗  ╔╬╬╩╩╩╬╬╗
;╠╬╬╬╬╗   ╔╬╬╬╬╣  ╠╬╣   ╠╬╣  ╠╬╣   ╚╩╝  ╠╬╣   ╠╬╣  ╠╬╣   ╠╬╣
;╠╬╬╬╬╬╗ ╔╬╬╬╬╬╣  ╠╬╬╦╦╦╬╬╣  ╠╬╣        ╠╬╬╦╦╦╬╬╝  ╠╬╣   ╠╬╣
;╠╬╣╚╬╬╬╦╬╬╬╝╠╬╣  ╠╬╬╩╩╩╬╬╣  ╠╬╣   ╔╦╗  ╠╬╬╬╬╬╬╝   ╠╬╣   ╠╬╣
;╠╬╣ ╚╬╬╬╬╬╝ ╠╬╣  ╠╬╣   ╠╬╣  ╚╬╬╦╦╦╬╬╝  ╠╬╣╚╩╬╬╦╗  ╚╬╬╦╦╦╬╬╝
;╚╩╝  ╚╩╩╩╝  ╚╩╝  ╚╩╝   ╚╩╝   ╚╩╩╩╩╩╝   ╚╩╝  ╚╩╩╝   ╚╩╩╩╩╩╝
; г=================================================┐
; │  Обработка прерываний СОМ-порта                 +-┐
; │  В качестве пораметра предается порт            │ │
; L-T------------------------------------------------ │
;   L=================================================-
@PUMA_COM       MACRO   _PORT_
                LOCAL   @@to_find, @@find, @@next, @@found
                LOCAL   @@BACK, @@COM_00, @@COM_01, @@COM_10, @@COM_11, @@EXIT_I_COM

                mov     ebx, _PORT_
                mov     al, _PT_COM1
                cmp     ebx, _ADR_COM_1
                je      @@to_find
                mov     al, _PT_COM2
                cmp     ebx, _ADR_COM_2
                je      @@to_find
                jmp     @@exit_i_com
                ;
@@to_find:      xor     cx, cx
                mov     es, ss:SEG_PUMA
                mov     edi, _PUMA_TRAN_OFFS
@@find:         cmp     es:[edi].L3_state, _PL3_OFF ; отключено !
                je      @@next
                cmp     es:[edi].pt_type, al        ;
                je      @@found
@@next:         add     edi, PUMA_Trans_Size
                add     ch, 2
                inc     cl
                cmp     cl, _PUMA_CHNLS_CNT     ; информационных каналов в блоке
                jb      @@find
                jmp     @@exit_i_com
                ;
@@found:
                MOV     ES, ss:SEG_PUMA_DRV     ;\
                MOV     FS, ss:SEG_PUMA_DRV     ;/

@@BACK:         ; *** Есть хоть какое-нибудь прерывание ? ***
                MOV     EDX, _PORT_ + 2         ; PORT_2 настроимся на нужный порт
                IN      AL, DX                  ; в AL данные для анализа
                TEST    AL, 1                   ; проверим было ли прерывание?
                JNZ     @@EXIT_I_COM            ; нет выйдем из прерывания
                AND     AL, 6                   ; уберем не нужное 00000110b
                JZ      @@COM_00                ; если ноль
                SHR     AL, 1
                SUB     AL, 2                   ;
                JS      @@COM_01                ; если отрицательно
                JZ      @@COM_10                ; если ноль
                JMP     @@COM_11                ; если один

@@COM_00:       ; *** Прерывание по состоянию модема ***
                MOV     EDX, _PORT_ + 6         ;\
                IN      AL, DX                  ; > просто прочитаем и на проверку других прерываний
                JMP     @@BACK                  ;/

@@COM_01:       ; *** Прерывание по передаче байта ***
                MOV     EDX, _PORT_ + 5         ;\ PORT_5
                IN      AL, DX                  ; > Пуст ли передатчик?
                TEST    AL, 20h                 ;/
                JZ      @@BACK                  ; Если нет, то проверим другие прерывания
                MOVZX   EDX, ch                 ; в EDX номер буфера
mov edx,0;;;;
                CALL    RB_BGetAL               ; прочитали
                OR      EDX,EDX                 ; если в буфере ничего нет
                JZ      @@BACK                  ; проверим другие прерывания
                MOV     EDX, _PORT_             ;\ передаём
                OUT     DX, AL                  ;/ байт
                JMP     @@COM_01                ; проверим есть еще прерывания

@@COM_10:       ; *** Прерывание по приему байта ***
                MOV     EDX, _PORT_             ;\ сбрасываем прерывание
                IN      AL, DX                  ;/ по приему
                MOVZX   EDX, ch                 ; в EDX номер буфера
                inc     edx
                CALL    RB_BPutAL               ; запишем в буфер
                JMP     @@BACK

@@COM_11:       ; *** Прерывание по состоянию приема ***
                MOV     EDX, _PORT_ + 5         ;\ PORT_5
                IN      AL, DX                  ;/ просто прочитаем
                JMP     @@BACK                  ; проверим еще перывания

@@EXIT_I_COM:   ; *** это всё - ТОЧКА ВЫХОДА ***
                ENDM

; --- режим конфигурации
; ~ макрос завершения режима конфигурации
; - Input:   имена основного, копии и временного файлов, метки
; - Output:
@The_End_Conf   MACRO   _name, _name_C, _name_T, _p1, _p, _p2
                ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;;;LOCAL   Back_Rnm, Ok
                push    ds
                mov     ds, ss:SEG_AX
                ; ~~~~ переименуем основной файл
                mov     edx, OFFSET _name
                CALL_HDD FileOpen
                jc      PCCOff_Err
                mov     edx, OFFSET _name_C
                CALL_HDD FileRename
                jc      PCCOff_Err
                CALL_HDD FileClose
                jc      _p2;;;PCCOff_Err
                ; ~~~~  переименуем переданный файл в основной(загрузочный)
                mov     edx, OFFSET _name_T
                CALL_HDD FileOpen
                jc      _p1;;;Back_Rnm
                mov     edx, OFFSET _name
                CALL_HDD FileRename
                jc      _p1;;;Back_Rnm
                CALL_HDD FileClose
                jmp     _p;;;Ok
_p1:;;;Back_Rnm:    ; ~~~~  вернемся обратно
                mov     edx, OFFSET _name_C
                CALL_HDD FileOpen
                jc      PCCOff_Err
_p2:            mov     edx, OFFSET _name
                CALL_HDD FileRename
                jc      PCCOff_Err
                CALL_HDD FileClose
                jmp     PCCOff_Err
_p:;;;Ok:       ; ~~~~ удалим переименованный основной файл
                mov     edx, OFFSET _name_C
                CALL_HDD FileEraseName
                jc      PCCOff_Err
                pop     ds
                ; ~~~~~~~~~~~~~~~~~~~~~~~~
                ENDM

